name: CI

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_call:

jobs:
  build:
    name: Build (${{ matrix.name }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - name: Linux
            os: ubuntu-latest
            
          - name: macOS
            os: macos-latest
            
          - name: Windows
            os: windows-latest
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup vcpkg (Windows)
        if: matrix.os == 'windows-latest'
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          vcpkgGitCommitId: '2024.11.16'
          vcpkgJsonGlob: '**/vcpkg.json'

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libfreetype6-dev libcairo2-dev

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install pkg-config freetype cairo

      - name: Setup MSBuild (Windows)
        if: matrix.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v2

      - name: Build the tools (Unix)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: make

      - name: Build the tools (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          # Create output directory
          New-Item -ItemType Directory -Force -Path "obj"
          
          # Build all projects
          $projects = @(
            "visual-studio\blackbox_decode\blackbox_decode.vcxproj",
            "visual-studio\encoder_testbed\encoder_testbed.vcxproj",
            "visual-studio\blackbox_render\blackbox_render.vcxproj"
          )
          
          $success = $true
          foreach ($project in $projects) {
            if (Test-Path $project) {
              Write-Host "Building $project..."
              
              msbuild $project `
                /p:Configuration=Release `
                /p:Platform=x64 `
                /p:OutDir="..\..\obj\\" `
                /p:VcpkgEnabled=true `
                /p:VcpkgRoot="${{ github.workspace }}\vcpkg" `
                /p:VcpkgTriplet=x64-windows `
                /verbosity:minimal `
                /maxcpucount
              
              if ($LASTEXITCODE -ne 0) {
                Write-Error "Failed to build $project"
                $success = $false
              } else {
                Write-Host "Successfully built $project"
              }
            } else {
              Write-Warning "Project file not found: $project"
            }
          }
          
          if (-not $success) {
            exit 1
          }
          
          # Verify executables were created
          $exeFiles = Get-ChildItem -Path "obj" -Filter "*.exe" -ErrorAction SilentlyContinue
          if ($exeFiles) {
            Write-Host "Generated $($exeFiles.Count) executable(s):"
            foreach ($exe in $exeFiles) {
              Write-Host "  - $($exe.Name) ($([math]::Round($exe.Length/1KB, 2)) KB)"
            }
          } else {
            Write-Error "No executables were generated!"
            exit 1
          }

      - name: Publish build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: blackbox-tools-${{ matrix.name }}
          retention-days: 30
          path: |
            obj/blackbox_decode
            obj/blackbox_render  
            obj/encoder_testbed
            obj/blackbox_decode.exe
            obj/blackbox_render.exe
            obj/encoder_testbed.exe
            obj/*.dll
          if-no-files-found: warn
