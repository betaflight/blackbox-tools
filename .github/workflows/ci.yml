name: CI

on: 
  workflow_call:

jobs:
  build:
    name: Build (${{ matrix.name }})
    runs-on:  ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - name: Linux
            os: ubuntu-latest

          - name: macOS
            os: macos-13

          - name: Windows
            os: windows-latest
      fail-fast: false

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libfreetype6-dev libcairo2-dev

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-13'
        run: |
          brew install pkg-config freetype cairo

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          # Using existing Visual Studio projects with pre-built dependencies
          Write-Host "Preparing modern Windows build with MSBuild"
        shell: pwsh

      - name: Build the tools
        if: matrix.os != 'windows-latest'
        shell: bash
        working-directory: .
        run: make

      - name: Build the tools (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          # Create obj directory to match expected artifact path
          New-Item -ItemType Directory -Force -Path "obj"

          # Find MSBuild (VS 2022 Enterprise is available on GitHub runners)
          $msbuild = "${env:ProgramFiles}\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\MSBuild.exe"
          if (-not (Test-Path $msbuild)) {
            $msbuild = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe"
          }

          # Build the Visual Studio solution
          & $msbuild "visual-studio\Baseflight blackbox tools.sln" /p:Configuration=Release /p:Platform=Win32 /p:OutDir="..\obj\\" /m

          # Copy any required DLLs from lib/win32 for runtime (if they exist)
          if (Test-Path "lib\win32\*.dll") {
            Copy-Item "lib\win32\*.dll" -Destination "obj\" -Force
          }

          # List generated files for verification
          Write-Host "Generated executables:"
          Get-ChildItem -Path "obj" -Filter "*.exe" | ForEach-Object { Write-Host $_.Name }

          if (Test-Path "obj\*.dll") {
            Write-Host "Runtime DLLs:"
            Get-ChildItem -Path "obj" -Filter "*.dll" | ForEach-Object { Write-Host $_.Name }
          }
        shell: pwsh
        working-directory: .

      - name: Publish build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Blackbox tools artifacts ${{matrix.name}}
          overwrite: true
          path: |
            obj/blackbox_decode
            obj/blackbox_render
            obj/encoder_testbed
            obj/blackbox_decode.exe
            obj/blackbox_render.exe
            obj/encoder_testbed.exe
