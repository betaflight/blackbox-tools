name: CI

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_call:

jobs:
  build:
    name: Build (${{ matrix.name }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - name: Linux
            os: ubuntu-latest
            
          - name: macOS
            os: macos-latest
            
          - name: Windows
            os: windows-latest
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache vcpkg (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/vcpkg
            !${{ github.workspace }}/vcpkg/buildtrees
            !${{ github.workspace }}/vcpkg/downloads
          key: vcpkg-${{ runner.os }}-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            vcpkg-${{ runner.os }}-

      - name: Setup vcpkg (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          try {
            # Install vcpkg if not cached
            if (-not (Test-Path "${{ github.workspace }}/vcpkg")) {
              Write-Host "Cloning vcpkg..."
              git clone https://github.com/Microsoft/vcpkg.git "${{ github.workspace }}/vcpkg"
            }
            
            cd "${{ github.workspace }}/vcpkg"
            
            # Bootstrap if needed
            if (-not (Test-Path "vcpkg.exe")) {
              Write-Host "Bootstrapping vcpkg..."
              ./bootstrap-vcpkg.bat
              if ($LASTEXITCODE -ne 0) {
                throw "vcpkg bootstrap failed"
              }
            }
            
            # Set environment variables for vcpkg
            $env:VCPKG_ROOT = "${{ github.workspace }}\vcpkg"
            $env:VCPKG_DEFAULT_TRIPLET = "x64-windows"
            
            # Try manifest mode first
            Write-Host "Attempting manifest mode installation..."
            cd "${{ github.workspace }}"
            
            & "${{ github.workspace }}\vcpkg\vcpkg.exe" install --triplet x64-windows
            
            if ($LASTEXITCODE -ne 0) {
              Write-Host "Manifest mode failed, trying classic mode..."
              # Fallback to classic mode
              cd "${{ github.workspace }}/vcpkg"
              ./vcpkg.exe install cairo:x64-windows freetype:x64-windows --recurse
            }
            
            if ($LASTEXITCODE -eq 0) {
              Write-Host "âœ“ vcpkg dependencies installed successfully"
              # Set environment variables for build
              echo "VCPKG_ROOT=${{ github.workspace }}\vcpkg" >> $env:GITHUB_ENV
              echo "VCPKG_DEFAULT_TRIPLET=x64-windows" >> $env:GITHUB_ENV
              echo "VCPKG_AVAILABLE=true" >> $env:GITHUB_ENV
            } else {
              Write-Warning "Both vcpkg installation methods failed, will attempt fallback build"
              echo "VCPKG_AVAILABLE=false" >> $env:GITHUB_ENV
            }
          }
          catch {
            Write-Warning "vcpkg setup failed: $($_.Exception.Message)"
            Write-Host "Will attempt to build without vcpkg dependencies"
            echo "VCPKG_AVAILABLE=false" >> $env:GITHUB_ENV
          }
        shell: pwsh

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libfreetype6-dev libcairo2-dev

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install pkg-config freetype cairo

      - name: Setup MSBuild (Windows)
        if: matrix.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v2

      - name: Build the tools (Unix)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: make

      - name: Build the tools (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          # Create output directory
          New-Item -ItemType Directory -Force -Path "obj"
          
          # Build simple projects first (no external dependencies)
          $simpleProjects = @(
            "visual-studio\blackbox_decode\blackbox_decode.vcxproj",
            "visual-studio\encoder_testbed\encoder_testbed.vcxproj"
          )
          
          $success = $true
          foreach ($project in $simpleProjects) {
            if (Test-Path $project) {
              Write-Host "Building $project..."
              
              msbuild $project `
                /p:Configuration=Release `
                /p:Platform=x64 `
                /p:OutDir="..\..\obj\\" `
                /verbosity:minimal `
                /maxcpucount
              
              if ($LASTEXITCODE -ne 0) {
                Write-Error "Failed to build $project"
                $success = $false
              } else {
                Write-Host "Successfully built $project"
              }
            }
          }
          
          # Build blackbox_render with vcpkg
          $renderProject = "visual-studio\blackbox_render\blackbox_render.vcxproj"
          if (Test-Path $renderProject) {
            Write-Host "Building blackbox_render..."
            
            # Check if vcpkg is available
            $vcpkgAvailable = $env:VCPKG_AVAILABLE -eq "true"
            
            if ($vcpkgAvailable) {
              Write-Host "Trying vcpkg build..."
              # Try with vcpkg integration first
              msbuild $renderProject `
                /p:Configuration=Release `
                /p:Platform=x64 `
                /p:OutDir="..\..\obj\\" `
                /p:VcpkgEnabled=true `
                /p:VcpkgRoot="${{ github.workspace }}\vcpkg" `
                /p:VcpkgTriplet=x64-windows `
                /verbosity:minimal `
                /maxcpucount
            } else {
              $LASTEXITCODE = 1  # Force fallback
            }
            
            if ($LASTEXITCODE -ne 0) {
              Write-Warning "vcpkg build failed or not available, trying fallback approach..."
              
              # Fallback: try without vcpkg (using local libs if available)
              msbuild $renderProject `
                /p:Configuration=Release `
                /p:Platform=x64 `
                /p:OutDir="..\..\obj\\" `
                /p:VcpkgEnabled=false `
                /verbosity:minimal `
                /maxcpucount
              
              if ($LASTEXITCODE -ne 0) {
                Write-Warning "blackbox_render build failed - continuing with other tools"
              } else {
                Write-Host "Successfully built blackbox_render with fallback"
              }
            } else {
              Write-Host "Successfully built blackbox_render with vcpkg"
              
              # Copy vcpkg DLLs if they exist
              $vcpkgBinPath = "${{ github.workspace }}\vcpkg\installed\x64-windows\bin"
              if (Test-Path $vcpkgBinPath) {
                $dllFiles = Get-ChildItem -Path $vcpkgBinPath -Filter "*.dll" -ErrorAction SilentlyContinue
                if ($dllFiles) {
                  Write-Host "Copying runtime DLLs..."
                  foreach ($dll in $dllFiles) {
                    Copy-Item $dll.FullName -Destination "obj\" -Force
                    Write-Host "  - Copied $($dll.Name)"
                  }
                }
              }
            }
          }
          
          if (-not $success) {
            exit 1
          }
          
          # Verify executables were created
          $exeFiles = Get-ChildItem -Path "obj" -Filter "*.exe" -ErrorAction SilentlyContinue
          if ($exeFiles) {
            Write-Host "Generated $($exeFiles.Count) executable(s):"
            foreach ($exe in $exeFiles) {
              Write-Host "  - $($exe.Name) ($([math]::Round($exe.Length/1KB, 2)) KB)"
            }
          } else {
            Write-Error "No executables were generated!"
            exit 1
          }

      - name: Publish build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: blackbox-tools-${{ matrix.name }}
          retention-days: 30
          path: |
            obj/blackbox_decode
            obj/blackbox_render  
            obj/encoder_testbed
            obj/blackbox_decode.exe
            obj/blackbox_render.exe
            obj/encoder_testbed.exe
            obj/*.dll
          if-no-files-found: warn
