name: CI

on:
  workflow_call:

jobs:
  build:
    name: Build (${{ matrix.name }})
    runs-on:  ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Linux
            os: ubuntu-latest

          - name: macOS
            os: macos-latest

          - name: Windows
            os: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libfreetype6-dev libcairo2-dev

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install pkg-config freetype cairo

      - name: Setup vcpkg (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg
          .\bootstrap-vcpkg.bat
          .\vcpkg.exe integrate install
          cd ..
          
      - name: Install graphics libraries (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Write-Host "Installing Cairo and FreeType via vcpkg..."
          
          # Check what packages are available first
          Write-Host "=== Available Cairo packages ==="
          .\vcpkg\vcpkg.exe search cairo
          Write-Host "=== Available FreeType packages ==="
          .\vcpkg\vcpkg.exe search freetype
          
          # Install packages - try the exact package names
          Write-Host "=== Installing FreeType ==="
          .\vcpkg\vcpkg.exe install freetype:x64-windows-static
          
          Write-Host "=== Installing Cairo ==="
          .\vcpkg\vcpkg.exe install cairo:x64-windows-static
          
          # Also try installing pixman (Cairo dependency) explicitly
          Write-Host "=== Installing Pixman (Cairo dependency) ==="
          .\vcpkg\vcpkg.exe install pixman:x64-windows-static
          
          Write-Host "=== Final package list ==="
          .\vcpkg\vcpkg.exe list
          
          Write-Host "=== Checking CMake integration files ==="
          $shareDir = "vcpkg\installed\x64-windows-static\share"
          if (Test-Path $shareDir) {
            Write-Host "Share directory contents:"
            Get-ChildItem $shareDir | Select-Object Name | Format-Wide -Column 4
            
            # Look for specific CMake config files
            Write-Host "=== Looking for Cairo CMake files ==="
            $cairoShareDirs = Get-ChildItem $shareDir -Name "*cairo*" -ErrorAction SilentlyContinue
            if ($cairoShareDirs) {
              foreach ($dir in $cairoShareDirs) {
                Write-Host "Found Cairo directory: $dir"
                Get-ChildItem "$shareDir\$dir" -Name "*.cmake" -ErrorAction SilentlyContinue
              }
            } else {
              Write-Host "❌ No Cairo directories found in share/"
            }
            
            Write-Host "=== Looking for FreeType CMake files ==="
            $freetypeShareDirs = Get-ChildItem $shareDir -Name "*freetype*" -ErrorAction SilentlyContinue
            if ($freetypeShareDirs) {
              foreach ($dir in $freetypeShareDirs) {
                Write-Host "Found FreeType directory: $dir"
                Get-ChildItem "$shareDir\$dir" -Name "*.cmake" -ErrorAction SilentlyContinue
              }
            }
          }
          
          Write-Host "=== Checking headers ==="
          $includeDir = "vcpkg\installed\x64-windows-static\include"
          if (Test-Path $includeDir) {
            Write-Host "Include directory contents:"
            Get-ChildItem $includeDir | Select-Object Name | Format-Wide -Column 4
            
            # Check for specific header files
            if (Test-Path "$includeDir\cairo") {
              Write-Host "✓ Cairo headers found"
              Get-ChildItem "$includeDir\cairo" | Select-Object Name
            } else {
              Write-Host "❌ Cairo headers not found"
            }
            
            if (Test-Path "$includeDir\freetype") {
              Write-Host "✓ FreeType headers found"
            } else {
              Write-Host "❌ FreeType headers not found"  
            }
          }

      - name: Build the tools (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          make clean
          make all -j

      - name: Build with MSVC (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Write-Host "=== CMake Configuration ==="
          cmake -B build `
            -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake" `
            -DVCPKG_TARGET_TRIPLET=x64-windows-static `
            -G "Visual Studio 17 2022" -A x64 `
            -DCMAKE_BUILD_TYPE=Release
          
          Write-Host "=== Configuration completed, checking for build files ==="
          if (Test-Path "build/ALL_BUILD.vcxproj") {
            Write-Host "✓ Visual Studio project files generated successfully"
          } else {
            Write-Host "❌ Project files not generated - CMake configuration failed"
            Write-Host "=== CMake Error Log ==="
            Get-Content "build/CMakeFiles/CMakeError.log" -ErrorAction SilentlyContinue
            Write-Host "=== CMake Output Log ==="  
            Get-Content "build/CMakeFiles/CMakeOutput.log" -ErrorAction SilentlyContinue
            exit 1
          }
          
          Write-Host "=== Building ==="
          cmake --build build --config Release --verbose
          
          # Check if build succeeded by looking for any compilation errors
          $buildExitCode = $LASTEXITCODE
          if ($buildExitCode -ne 0) {
            Write-Host "❌ Build failed with exit code: $buildExitCode"
            Write-Host "=== MSBuild Error Details ==="
          }
          
          Write-Host "=== Build Results ==="
          if (Test-Path "build/bin/Release/") {
            Get-ChildItem build/bin/Release/ -ErrorAction SilentlyContinue | Format-Table Name, Length
          } else {
            Write-Host "❌ Build output directory not created"
            # Check for alternative output locations
            Get-ChildItem -Recurse build/ -Name "*.exe" -ErrorAction SilentlyContinue
          }
          
          # Verify all required executables
          $requiredExes = @("blackbox_decode.exe", "encoder_testbed.exe", "blackbox_render.exe")
          foreach ($exe in $requiredExes) {
            $path = "build/bin/Release/$exe"
            if (Test-Path $path) {
              Write-Host "✓ $exe found ($(((Get-Item $path).Length / 1KB).ToString('F1')) KB)"
            } else {
              Write-Host "❌ $exe MISSING"
            }
          }
          
          # If blackbox_render.exe is missing, show detailed error info
          if (!(Test-Path "build/bin/Release/blackbox_render.exe")) {
            Write-Host "=== DEBUGGING blackbox_render.exe build failure ==="
            Write-Host "Checking for any built executables:"
            Get-ChildItem -Recurse build/ -Name "*.exe" -ErrorAction SilentlyContinue
            Write-Host "MSBuild logs:"
            Get-ChildItem -Recurse build/ -Name "*.log" | ForEach-Object { 
              Write-Host "--- $_ ---"
              Get-Content $_ -ErrorAction SilentlyContinue | Select-Object -Last 30
            }
            Write-Host "=== CMake Cache variables ==="
            Get-Content "build/CMakeCache.txt" | Select-String "CAIRO|FREETYPE|PNG|ZLIB" | Select-Object -First 20
            exit 1
          }
          
      - name: Test executables (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Write-Host "=== Testing all executables ==="
          
          $exes = @("blackbox_decode.exe", "encoder_testbed.exe", "blackbox_render.exe")
          $allFound = $true
          
          foreach ($exe in $exes) {
            $path = "build\bin\Release\$exe"
            if (Test-Path $path) {
              $size = [math]::Round((Get-Item $path).Length / 1KB, 1)
              Write-Host "✓ $exe found ($size KB)"
              
              # Test execution (help commands typically return exit code 1 or -1)
              $output = ""
              $errorOutput = ""
              try {
                $process = Start-Process -FilePath $path -ArgumentList "--help" -PassThru -Wait -NoNewWindow -RedirectStandardOutput "temp_stdout.txt" -RedirectStandardError "temp_stderr.txt"
                $output = Get-Content "temp_stdout.txt" -Raw -ErrorAction SilentlyContinue
                $errorOutput = Get-Content "temp_stderr.txt" -Raw -ErrorAction SilentlyContinue
                Remove-Item "temp_stdout.txt", "temp_stderr.txt" -ErrorAction SilentlyContinue
                
                # Check if the executable ran and produced expected output
                if ($output -match "Usage" -or $errorOutput -match "Usage" -or $process.ExitCode -eq 1 -or $process.ExitCode -eq -1) {
                  Write-Host "  ✓ $exe executes successfully (exit code: $($process.ExitCode))"
                } else {
                  Write-Host "  ❌ $exe unexpected exit code: $($process.ExitCode)"
                  Write-Host "  Stdout: $output"
                  Write-Host "  Stderr: $errorOutput"
                  $allFound = $false
                }
              } catch {
                Write-Host "  ❌ $exe FAILED TO START: $($_.Exception.Message)"
                Write-Host "  This indicates a DLL dependency issue"
                $allFound = $false
              }
            } else {
              Write-Host "❌ $exe MISSING - CRITICAL FAILURE"
              $allFound = $false
            }
          }
          
          if (-not $allFound) {
            Write-Host "=== BUILD FAILED: Required executables missing ==="
            exit 1
          }
          
          Write-Host "✅ ALL EXECUTABLES BUILT AND TESTED SUCCESSFULLY"

      - name: Publish build artifacts (Linux/macOS)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: Blackbox tools ${{matrix.name}}
          path: |
            obj/blackbox_decode
            obj/blackbox_render
            obj/encoder_testbed
          retention-days: 60
          overwrite: true

      - name: Publish build artifacts (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: Blackbox tools ${{matrix.name}}
          path: |
            build/bin/Release/*.exe
            build/bin/*.exe
          retention-days: 60
          overwrite: true
